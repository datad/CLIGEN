if(boolOrBin == "bool")
{
boolMutation <- data.frame(matrix(FALSE,length(patients),length(genes)),
row.names = patients)
trueVal = TRUE
} else{
boolMutation <- data.frame(matrix(0,length(patients),length(genes)),
row.names = patients)
trueVal = 1
}
names(boolMutation) <- genes
for(i in seq_len(dim(mutation)[1])){
Apatient <- as.character(mutation$mutationBarcodes[i])
if(Apatient %in% patients){
#only non-silent mutations
TMuta <- unique(mutation$Variant_Classification[i])
if(TMuta != "Silent"){
APgene <- mutation$Hugo_Symbol[i]
boolMutation[Apatient,APgene] <- trueVal
}
}
}
####
#plot distributions
#1 Number of mutations per patient
mut4patient <- apply(boolMutation,1,sum)
cat("Number of mutations per patient: ")
cat(range(mut4patient))
mutation$mutationBarcodes <- tolower(substring(mutation$Tumor_Sample_Barcode,1,12)) #get just patient ID
save(list=c("patients", "mutation", "clinicalLong"), file=dataFile)
genes <- unique(as.character(mutation$Hugo_Symbol))
if(boolOrBin == "bool")
{
boolMutation <- data.frame(matrix(FALSE,length(patients),length(genes)),
row.names = patients)
trueVal = TRUE
} else{
boolMutation <- data.frame(matrix(0,length(patients),length(genes)),
row.names = patients)
trueVal = 1
}
names(boolMutation) <- genes
for(i in seq_len(dim(mutation)[1])){
Apatient <- as.character(mutation$mutationBarcodes[i])
if(Apatient %in% patients){
#only non-silent mutations
TMuta <- unique(mutation$Variant_Classification[i])
if(TMuta != "Silent"){
APgene <- mutation$Hugo_Symbol[i]
boolMutation[Apatient,APgene] <- trueVal
}
}
}
####
#plot distributions
#1 Number of mutations per patient
mut4patient <- apply(boolMutation,1,sum)
cat("Number of mutations per patient: ")
cat(range(mut4patient))
pdf(file = "temp/histoPat4mut.pdf" ,  onefile = TRUE, pagecentre = FALSE, compress = FALSE)
hist(pat4genes, main = "Histogram patient per gene (patient count)",
ylab = "Number of genes",
xlab = "Number of mutations", breaks=70)
dev.off()
#description boolean table
genes <- names(boolMutation)
patients <- row.names(boolMutation)
save(patients,file="data/patients.RData")
save(genes,file="data/genes.RData")
save(boolMutation,file=dataFile)
source('R/0-ConfigurationVariables.R', echo=F)
source('R/1-ReadRawFiles.R', echo=F)
# 1- read the raw files from the 'rawData' folder and store them in 'dataFile'
readBRCAFiles (dataFile = "temp/readBRCAFiles.RData",
rawMutationFile="rawData/data_mutations_extended.txt",
rawClinicalFile="rawData/BRCA.clin.merged.txt")
source('R/0-ConfigurationVariables.R', echo=F)
source('R/1-ReadRawFiles.R', echo=F)
# 1- read the raw files from the 'rawData' folder and store them in 'dataFile'
readBRCAFiles (dataFile = "temp/readBRCAFiles.RData",
rawMutationFile="rawData/data_mutations_extended.txt",
rawClinicalFile="rawData/BRCA.clin.merged.txt")
source('R/1-createBoolMutation.R', echo=F)
boolMutation <- createBoolMutation(fileName = "rawData/data_mutations_extended.txt", boolOrBin="bina")
load("data/patients.RData")
load("data/genes.RData")
load("data/binaMutation.RData")
source('R/1-createBoolMutation.R', echo=F)
source('R/0-ConfigurationVariables.R', echo=F)
createBoolMutation(fileName = "rawData/data_mutations_extended.txt", boolOrBin="bina")
load("data/patients.RData")
load("data/genes.RData")
load("data/binaMutation.RData")
# 2- filter the clinical variables specified in "rawData/clinical_useful.csv" and "rawData/merge_useful.csv"
filterClinicalVariables()
load("data/tensorClinical.RData")
row.names(mergedClini)
load("temp/filterCLinicalVariables.RData")
source('~/10-Research/Current/CLINGEN/9source/CLIGEN/publicPackage/CLIGEN/R/1-ReadRawFiles.R', echo=TRUE)
# 2- filter the clinical variables specified in "rawData/clinical_useful.csv" and "rawData/merge_useful.csv"
filterClinicalVariables()
load("data/patients.RData")
# 2- filter the clinical variables specified in "rawData/clinical_useful.csv" and "rawData/merge_useful.csv"
filterClinicalVariables()
load("data/patients.RData")
source('R/0-ConfigurationVariables.R', echo=F)
source('R/1-ReadRawFiles.R', echo=F)
readBRCAFiles (dataFile = "temp/readBRCAFiles.RData",
rawMutationFile="rawData/data_mutations_extended.txt",
rawClinicalFile="rawData/BRCA.clin.merged.txt")
# 2- filter the clinical variables specified in "rawData/clinical_useful.csv" and "rawData/merge_useful.csv"
filterClinicalVariables()
patients <- mergedClini$patient.bcr_patient_barcode
patients <- tensorClinical$patient.bcr_patient_barcode
tensorClinical$patient.bcr_patient_barcode
patients <- as.character(mergedClini$patient.bcr_patient_barcode)
save(patients,file="data/patients.RData")
c
load("data/tensorClinical.RData")
View(tensorClinical)
source('R/1-createBoolMutation.R', echo=F)
createBoolMutation(boolOrBin="bina")
load("data/patients.RData")
load("data/genes.RData")
load("data/binaMutation.RData")
#Load mutation and clinical matrices
dataFile = "dataExample/noFiltered/boolMutation.RData"
load(dataFile, env = globalenv())
load("dataExample/noFiltered/boolClinical.RData")
View(boolClinical)
#merge
patients <- intersect( row.names(boolClinical), row.names(boolMutation) )
boolClinical <- boolClinical[patients,]
boolMutation <- boolMutation[patients,]
#description boolean table
genes <- names(boolMutation)
genes
save(patients,file="data/patients.RData")
save(genes,file="data/genes.RData")
#write csv files for python script
binaClinical <- as.data.frame(lapply(boolClinical, as.numeric), stringsAsFactors = FALSE)
binaMutation <- as.data.frame(lapply(boolMutation, as.numeric), stringsAsFactors = FALSE)
write.csv2(binaClinical, file = "temp/10-binaC.csv",row.names = FALSE)
tBina = t(binaMutation)
write.table(tBina, file = "temp/10-binaM.csv", sep =';', dec = '.', row.names = FALSE )
save.image("temp/2-BoolMatrices.RData")
write.table(tBina, file = "data/10-binaM.csv", sep =';', dec = '.', row.names = FALSE )
write.csv2(binaClinical, file = "data/10-binaC.csv",row.names = FALSE)
tClini = t(binaClinical)
write.csv2(tClini, file = "data/10-binaC.csv",row.names = FALSE)
write.csv2(binaClinical, file = "data/10-binaC.csv",row.names = FALSE)
write.csv2(tClini, file = "data/10-binaC.csv",row.names = FALSE)
load("data/patients.RData")
load("data/genes.RData")
load("data/binaMutation.RData")
load("temp/2-BoolMatrices.RData")
dim(binaMutation) #p x g
length(names(binaMutation)) #2714 genes
length(row.names(binaMutation)) #456 patients
(s <- svd(t(binaMutation)) ) #genes x patients
length(s$d) #p
dim(s$u) #g x p
dim(s$v) #p x p
D <- diag(s$d)
dim(D) #p x p
plot(s$d)
hist(s$d, breaks = 20)
sum(binaMutation)
#r=p
X1 = s$u %*% D %*% t(s$v) #  X = U D V'
dim(X1)  #g x p
sum(X1)
X_smooth = s$u[,1:Pdim] %*% D[1:Pdim,1:Pdim] %*% t(s$v)[1:Pdim,] #  X = U D V'
# Getting the top 50% of the diagonal
Pdim = ceiling(dim(s$u)[2]*0.5)
X_smooth = s$u[,1:Pdim] %*% D[1:Pdim,1:Pdim] %*% t(s$v)[1:Pdim,] #  X = U D V'
AbsoluteErrorAproxSum = (sum(binaMutation)-sum(X_smooth))
RelativeErrorAproxSum = (sum(binaMutation)-sum(X_smooth))/sum(binaMutation)
AbsoluteErrorAproxSum
RelativeErrorAproxSum
matrixbM = t(as.matrix(binaMutation))
row.names(matrixbM) <- NULL
names(matrixbM) <- NULL
AbsoluteErrorAproxNorm = max(apply(abs(matrixbM - X_smooth ),1,sum))
RelativeErrorAproxNorm = max(apply(abs(matrixbM - X_smooth ),1,sum)) / max(apply(abs(matrixbM),1,sum))
AbsoluteErrorAproxNorm
RelativeErrorAproxNorm
mutationSmooth <- X_smooth
row.names(mutationSmooth) <- names(binaMutation)
names(mutationSmooth) <- row.names(binaMutation)
dim(mutationSmooth)
write.table(mutationSmooth, file = "temp/10-binaM.csv", sep =';', dec = '.', row.names = FALSE )
RelativeErrorAproxNorm
load("data/genes.RData")
load("data/patients.RData")
load("dataExample/noFiltered/boolClinical.RData")
load("data/mutationSmooth.RData")
load("data/patients.RData")
load("data/genes.RData")
load("dataExample/noFiltered/boolClinical.RData")
load("temp/2-BoolMatrices.RData")
# SVD
(s <- svd(t(binaMutation)) ) #genes x patients
# Get diagonal
D <- diag(s$d)
# Getting the top 50% of the diagonal
Pdim = ceiling(dim(s$u)[2]*0.5)
# Matrix recunstriction via top diag multiplication
X_smooth = s$u[,1:Pdim] %*% D[1:Pdim,1:Pdim] %*% t(s$v)[1:Pdim,] #  X = U D V'
AbsoluteErrorAproxSum = (sum(binaMutation)-sum(X_smooth))
RelativeErrorAproxSum = (sum(binaMutation)-sum(X_smooth))/sum(binaMutation)
cat("\n\nRelativeErrorAproxSum  :", RelativeErrorAproxSum)
matrixbM = t(as.matrix(binaMutation))
row.names(matrixbM) <- NULL
names(matrixbM) <- NULL
AbsoluteErrorAproxNorm = max(apply(abs(matrixbM - X_smooth ),1,sum))
RelativeErrorAproxNorm = max(apply(abs(matrixbM - X_smooth ),1,sum)) / max(apply(abs(matrixbM),1,sum))
cat("\n\nRelativeErrorAproxNorm  :", RelativeErrorAproxNorm)
mutationSmooth <- X_smooth
row.names(mutationSmooth) <- names(binaMutation)
names(mutationSmooth) <- row.names(binaMutation)
save(mutationSmooth, file="data/mutationSmooth.RData")
load("data/mutationSmooth.RData")
load("data/patients.RData")
load("data/genes.RData")
load("dataExample/noFiltered/boolClinical.RData")
binaMutation <- as.data.frame(t(mutationSmooth))
bC <- row.names(binaClinical)
bM <- row.names(binaMutation)
#same patients
patients <- as.character(unlist( intersect(bC,bM) ))
binaClinical <- binaClinical[ patients, ]
binaMutation <- binaMutation[ patients, ]
binaMutationNoNames <- binaMutation
binaClinicalNoNames <- binaClinical
names(binaMutationNoNames)  <- seq_len( dim(binaMutation)[2] )
names(binaClinicalNoNames) <- seq_len( dim(binaClinical)[2] )
###add first table
AbinaMutationNoNames <- binaMutationNoNames
for ( j in seq_along(row.names(AbinaMutationNoNames)))
{
AbinaMutationNoNames[j,] <- binaClinicalNoNames[j,1] * AbinaMutationNoNames[j,]
}
#write.csv(AbinaMutationNoNames,file = "temp/1-3-tensorMatrices-01.csv")
MatrixOrderPxGxC <- AbinaMutationNoNames
for ( i in (2:length(names(binaClinicalNoNames))))
{
AbinaMutationNoNames <- binaMutationNoNames
for ( j in seq_along(row.names(AbinaMutationNoNames)))
{
AbinaMutationNoNames[j,] <- binaClinicalNoNames[j,i] * AbinaMutationNoNames[j,]
}
##CONCATANATE MATRICES
# write.csv(AbinaMutationNoNames,file = paste("temp/20-tensorMatrices-",
#                                 i,".csv", sep=''))
MatrixOrderPxGxC <- cbind(MatrixOrderPxGxC, AbinaMutationNoNames)
}
bC <- row.names(binaClinical)
load("data/mutationSmooth.RData")
load("data/patients.RData")
load("data/genes.RData")
load("dataExample/noFiltered/boolClinical.RData")
boolMutation <- as.data.frame(t(mutationSmooth))
bC <- row.names(boolClinical)
bM <- row.names(boolMutation)
#same patients
patients <- as.character(unlist( intersect(bC,bM) ))
load("data/patients.RData")
load("temp/2-BoolMatrices.RData")
row.names(binaMutation)
#Load mutation and clinical matrices
dataFile = "dataExample/noFiltered/boolMutation.RData"
load(dataFile, env = globalenv())
row.names(binaMutation)
row.names(boolMutation)
load("temp/2-BoolMatrices.RData")
# SVD
(s <- svd(t(boolMutation)) ) #genes x patients
# Get diagonal
D <- diag(s$d)
# Getting the top 50% of the diagonal
Pdim = ceiling(dim(s$u)[2]*0.5)
# Matrix recunstriction via top diag multiplication
X_smooth = s$u[,1:Pdim] %*% D[1:Pdim,1:Pdim] %*% t(s$v)[1:Pdim,] #  X = U D V'
AbsoluteErrorAproxSum = (sum(boolMutation)-sum(X_smooth))
RelativeErrorAproxSum = (sum(boolMutation)-sum(X_smooth))/sum(boolMutation)
cat("\n\nRelativeErrorAproxSum  :", RelativeErrorAproxSum)
matrixbM = t(as.matrix(boolMutation))
row.names(matrixbM) <- NULL
names(matrixbM) <- NULL
AbsoluteErrorAproxNorm = max(apply(abs(matrixbM - X_smooth ),1,sum))
RelativeErrorAproxNorm = max(apply(abs(matrixbM - X_smooth ),1,sum)) / max(apply(abs(matrixbM),1,sum))
cat("\n\nRelativeErrorAproxNorm  :", RelativeErrorAproxNorm)
mutationSmooth <- X_smooth
row.names(mutationSmooth) <- names(boolMutation)
names(mutationSmooth) <- row.names(boolMutation)
save(mutationSmooth, file="data/mutationSmooth.RData")
write.table(mutationSmooth, file = "temp/10-binaM.csv", sep =';', dec = '.', row.names = FALSE )
load("temp/2-BoolMatrices.RData")
# SVD
(s <- svd(t(boolMutation)) ) #genes x patients
# Get diagonal
D <- diag(s$d)
# Getting the top 50% of the diagonal
Pdim = ceiling(dim(s$u)[2]*0.5)
# Matrix recunstriction via top diag multiplication
X_smooth = s$u[,1:Pdim] %*% D[1:Pdim,1:Pdim] %*% t(s$v)[1:Pdim,] #  X = U D V'
AbsoluteErrorAproxSum = (sum(boolMutation)-sum(X_smooth))
RelativeErrorAproxSum = (sum(boolMutation)-sum(X_smooth))/sum(boolMutation)
sum(boolMutation)
rm(list = ls())
#Load mutation and clinical matrices
dataFile = "dataExample/noFiltered/boolMutation.RData"
load(dataFile, env = globalenv())
dataFile = "dataExample/noFiltered/boolClinical.RData"
load(dataFile, env = globalenv())
#merge
patients <- intersect( row.names(boolClinical), row.names(boolMutation) )
boolClinical <- boolClinical[patients,]
boolMutation <- boolMutation[patients,]
#safe in case these files were not present
genes <- names(boolMutation)
save(patients,file="data/patients.RData")
save(genes,file="data/genes.RData")
boolMutation[1:10,1:5]
#write csv files for python script
binaClinical <- as.data.frame(lapply(boolClinical, as.numeric), stringsAsFactors = FALSE)
binaMutation <- as.data.frame(lapply(boolMutation, as.numeric), stringsAsFactors = FALSE)
save(binaClinical,file="data/binaClinical.RData")
save(binaMutation,file="data/binaMutation.RData")
#write csv files for python script
tClini = t(binaClinical)
write.csv2(tClini, file = "temp/10-binaC.csv",row.names = FALSE)
tBina = t(binaMutation)
write.table(tBina, file = "temp/10-binaM.csv", sep =';', dec = '.', row.names = FALSE )
save.image("temp/2-BoolMatrices.RData")
row.names(binaClinical)
col.names(binaClinical)
names(binaClinical)
names(binaMutation)
names(boolClinical)
clinicalVars <- names(boolClinical)
save(clinicalVars,file="data/clinicalVars.RData")
row.names(boolClinical)
row.names(binaClinical) <- row.names(boolClinical)
row.names(binaMutation) <- row.names(boolClinical)
row.names(binaMutation)
save(binaClinical,file="data/binaClinical.RData")
save(binaMutation,file="data/binaMutation.RData")
load("data/binaClinical.RData")
load("data/binaMutation.RData")
# SVD
(s <- svd(t(binaMutation)) ) #genes x patients
# Get diagonal
D <- diag(s$d)
# Getting the top 50% of the diagonal
Pdim = ceiling(dim(s$u)[2]*0.5)
# Matrix recunstriction via top diag multiplication
X_smooth = s$u[,1:Pdim] %*% D[1:Pdim,1:Pdim] %*% t(s$v)[1:Pdim,] #  X = U D V'
AbsoluteErrorAproxSum = (sum(binaMutation)-sum(X_smooth))
RelativeErrorAproxSum = (sum(binaMutation)-sum(X_smooth))/sum(binaMutation)
cat("\n\nRelativeErrorAproxSum  :", RelativeErrorAproxSum)
matrixbM = t(as.matrix(binaMutation))
row.names(matrixbM) <- NULL
names(matrixbM) <- NULL
AbsoluteErrorAproxNorm = max(apply(abs(matrixbM - X_smooth ),1,sum))
RelativeErrorAproxNorm = max(apply(abs(matrixbM - X_smooth ),1,sum)) / max(apply(abs(matrixbM),1,sum))
cat("\n\nRelativeErrorAproxNorm  :", RelativeErrorAproxNorm)
mutationSmooth <- X_smooth
row.names(mutationSmooth) <- names(binaMutation)
names(mutationSmooth) <- row.names(binaMutation)
names(binaMutation)
row.names(binaMutation)
mutationSmooth <- X_smooth
row.names(mutationSmooth) <- names(binaMutation)
names(mutationSmooth) <- row.names(binaMutation)
save(mutationSmooth, file="data/mutationSmooth.RData")
write.table(mutationSmooth, file = "temp/10-binaM.csv", sep =';', dec = '.', row.names = FALSE )
#write csv file for python script
write.table(mutationSmooth, file = "temp/10-binaMsmooth.csv", sep =';', dec = '.', row.names = FALSE )
rm(list = ls())
load("data/mutationSmooth.RData")
load("data/patients.RData")
load("data/genes.RData")
load("data/binaClinical.RData")
rm(list = ls())
load("data/mutationSmooth.RData")
load("data/patients.RData")
load("data/genes.RData")
load("data/binaClinical.RData")
mutationSmooth <- as.data.frame(t(mutationSmooth))
mutationSmooth[1:5,1:5]
mutationSmooth2 <- mutationSmooth
load("data/mutationSmooth.RData")
names(mutationSmooth) >- rown
names(mutationSmooth) -> rown
rown
names(mutationSmooth)
rm(list = ls())
load("data/binaClinical.RData")
load("data/binaMutation.RData")
# SVD
(s <- svd(t(binaMutation)) ) #genes x patients
# Get diagonal
D <- diag(s$d)
# Getting the top 50% of the diagonal
Pdim = ceiling(dim(s$u)[2]*0.5)
# Matrix recunstriction via top diag multiplication
X_smooth = s$u[,1:Pdim] %*% D[1:Pdim,1:Pdim] %*% t(s$v)[1:Pdim,] #  X = U D V'
AbsoluteErrorAproxSum = (sum(binaMutation)-sum(X_smooth))
RelativeErrorAproxSum = (sum(binaMutation)-sum(X_smooth))/sum(binaMutation)
cat("\n\nRelativeErrorAproxSum  :", RelativeErrorAproxSum)
matrixbM = t(as.matrix(binaMutation))
row.names(matrixbM) <- NULL
names(matrixbM) <- NULL
AbsoluteErrorAproxNorm = max(apply(abs(matrixbM - X_smooth ),1,sum))
RelativeErrorAproxNorm = max(apply(abs(matrixbM - X_smooth ),1,sum)) / max(apply(abs(matrixbM),1,sum))
cat("\n\nRelativeErrorAproxNorm  :", RelativeErrorAproxNorm)
mutationSmooth <- X_smooth
mutationSmooth <- as.data.frame(t(X_smooth))
row.names(mutationSmooth) <- row.names(binaMutation)
names(mutationSmooth) <- names(binaMutation)
save(mutationSmooth, file="data/mutationSmooth.RData")
row.names(mutationSmooth)
names(mutationSmooth)
#write csv file for python script
write.table(X_smooth, file = "temp/10-binaMsmooth.csv", sep =';', dec = '.', row.names = FALSE )
rm(list = ls())
load("data/mutationSmooth.RData")
load("data/patients.RData")
load("data/genes.RData")
load("data/binaClinical.RData")
binaClinical <- binaClinical[ patients, ]
mutationSmooth <- mutationSmooth[ patients, ]
mutationSmoothNoNames <- mutationSmooth
binaClinicalNoNames <- binaClinical
names(mutationSmoothNoNames)  <- seq_len( dim(mutationSmooth)[2] )
names(binaClinicalNoNames) <- seq_len( dim(binaClinical)[2] )
###add first table
AmutationSmoothNoNames <- mutationSmoothNoNames
for ( j in seq_along(row.names(AmutationSmoothNoNames)))
{
AmutationSmoothNoNames[j,] <- binaClinicalNoNames[j,1] * AmutationSmoothNoNames[j,]
}
#write.csv(AmutationSmoothNoNames,file = "temp/1-3-tensorMatrices-01.csv")
MatrixOrderPxGxC <- AmutationSmoothNoNames
for ( i in (2:length(names(binaClinicalNoNames))))
{
AmutationSmoothNoNames <- mutationSmoothNoNames
for ( j in seq_along(row.names(AmutationSmoothNoNames)))
{
AmutationSmoothNoNames[j,] <- binaClinicalNoNames[j,i] * AmutationSmoothNoNames[j,]
}
##CONCATANATE MATRICES
# write.csv(AmutationSmoothNoNames,file = paste("temp/20-tensorMatrices-",
#                                 i,".csv", sep=''))
MatrixOrderPxGxC <- cbind(MatrixOrderPxGxC, AmutationSmoothNoNames)
}
load("dataExample/Filtered/boolMutation.RData")
load("dataExample/Filtered/boolMutation.RData")
load("dataExample/Filtered/boolMutation.RData")
load("dataExample/Filtered/boolMutation.RData")
load("dataExample/Filtered/mutationSmooth.RData")
dim(mutationSmooth)
499*482
load("dataExample/Filtered/MatrixOrderPxGxC.RData")
499*482*32
499*32
load("dataExample/Filtered/boolClinical.RData")
456*38
load("dataExample/Filtered/boolClinical.RData")
482*32
load("dataExample/Filtered/patients.RData")
load("dataExample/Filtered/patients.RData")
#version 4 (September-4-2018)
rm(list = ls())
#Load tensor and matrices
load("dataExample/Filtered/MatrixOrderPxGxC.RData")
#load my libraries
libs<-c("Packages.R")
libs<-paste("https://gist.githubusercontent.com/datad/39b9401a53e7f4b44e9bea4d584ac3e8/raw/", libs,sep='')
sapply(libs, function(u) {source(u)})
#rm(list=ls()[-which(ls() %in% c("patients", "mutation", "clinicalLong"))])
rm(list=ls()[which(ls() %in% c("libs"))])
save.image("data/loadls.RData")
load("dataExample/Filtered/patients.RData")
load("dataExample/Filtered/mutationSmooth.RData")
names(mutationSmooth)
load("dataExample/Filtered/binaMatrices.RData")
#Load tensor and matrices
load("dataExample/Filtered/MatrixOrderPxGxC.RData")
load("data/loadls.RData")
labelsPA <- patients
labelsGenes <- names(binaMutation)
labelsClinical <- names(binaClinical)
library("ThreeWay") #For tensors
paste("temp/log_r",r,".log", sep='')
r=10
paste("temp/log_r",r,".log", sep='')
k=2
load(paste("dataExample/Filtered/bcCPk",r,".RData", sep=''), envir = globalenv())
r=2
load(paste("dataExample/Filtered/bcCPk",r,".RData", sep=''), envir = globalenv())
load(paste("dataExample/Filtered/bcCPk",r,".Rd", sep=''), envir = globalenv())
patientsF <- bcCP$A  #p x k
genesF <- bcCP$B #genes x k
clinicalF <- bcCP$C #clinical x k.
save(list=c("patientsF", "genesF", "genesF"), file=paste("temp/factors_r",r,".RData", sep='') )
library("fpc")
library("NbClust")
k=2
load(file=paste("dataExample/Filtered/verotypesWithOutL_k",k,".RData",sep=''))
